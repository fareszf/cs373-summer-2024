Exercises: 
(1) build select (yield, list comprehension, filter)
def select(r, up) # yield
    for d in r:
         if up(d):
             yield d

def select(r, up): # list comprehension
    return (d for d in r if up(d))

def select(r, up): # filter
    return filter(up, r)

•	build project 
Another operation is project.
movies = [{"name" : "shane", "year" : 1949, "genre" : "western", "director" : "george stevens"},
                 {"name" : "star wars", "year" : "1977", "genre" : "western", "director" : "george lucas"}]

project(movies, "year", "name", "genre")  # this means that we need 3 out of 4 subset of column.

def project (r, *t)

•	 build CrossJoin
CrossJoin (r, s): 
CrossJoin combines 
the first row of r with all rows of s, 
the second row of r with all rows of s, 
....
Cross-Join(r,s)
Note: dict constructor receives two dictionaries and returns one dictionary that results from combining first with the unpacking of the second.
e.g., 
d1 = {}
d2 = {}
d3 = dict(d1, **d2)
Note:
(1) d = {1: 'one', 2: 'two'} is possible, but, obviously, dict(1='one' ...) is not.
(2) when applying dict on d1 and d2 where both have two identical key values, the value of d2 is taken.
(3) When using dict constructor with dictionaries that has integer keys, we receive an error.
# error
>>> d1 = {1 : "one", 2 : "two"}
>>> d2 = {3 : "Three", 4 : "Four"}
>>> d3 = dict(d1, **d2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: keyword arguments must be strings

# no error - replace integers with strings.
>>> d1 = {"1" : "one", "2" : "two"}
>>> d2 = {"3" : "Three", "4" : "Four"}
>>> dict(d1, **d2)
{'3': 'Three', '4': 'Four', '1': 'one', '2': 'two'}
>>>


•	build ThetaJoin
ThetaJoin joins corresponding rows given certain conditions.
E.g., Given two relations:
r with 3 rows
s with 4 rows
lambda u, v : u["A"] == v["C"]
u: a row from the first relations r
v: a row from the second relation v
u["A"]: the value of the attribute "A" in u
v["C"]: the value of the attribute "C" in v

-------------
•	build NaturalJoin
NaturalJoin marries rows from two relations when columns of common attributes have same values.
r = [{"A" : 1, "B" : 4, "C" : 7},
       {"A" : 2, "B" : 5, "C" : 8},
       {"A" : 3, "B" : 6, "C" : 9}] # attributes A, B and C

s = [{"A" : 2, "B" : 4, "D" : 7}, # attributes A, B and D
       {"A" : 3, "B" : 5, "D" : 5},
       {"A" :  3, "B" : 6, "D" : 6},
       {"A" :  4, "B" : 7, "D" : 6}]
NaturalJoin(r, s) = [{'A' :  3, 'B' : 6, 'C' : 9, 'D' : 6}]
 # r and share the attributes "A" and "B", therefore we will marry the two rows that has the same values
# for these two attributes. row #3 of r and row # 3 of s.
naturaljoin(r,s): marry rows from two relations when col of commnon attributes have the same value.
Note:
-----
(1) in case of no common attributes between r and s, naturaljoin will do cross join
(2) in case of common attributes but no common values, naturaljoin will do nothing.
(3) in case of common attributes with common values, naturaljoin will return the common values. 
------------------------------
Note:
def bp (u, v) :
    return not any(u[k] != v[k] *for* k in u *if* k in v) # can be replaced with "retrun all(u[k] == v[k] ...)"

This predicate return true when two rows, u and v, have equal values for the same attributes, 
False, otherwise.
Note that in case of the two rows have completely different attributes, bp will return true.

This predicate will return true in two cases. First when there are no common attributes between the two input dictionaries or when all the common attributes have the same value.
It will return false if there is at least one common attribute with different value.