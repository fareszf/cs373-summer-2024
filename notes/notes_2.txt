- unittest
Python's unittest in its simplest form consists of the function main and the class TestCase
Define a class that extends TestCase. Each function inside this class must start with "test"

Unittest workflow is:
1. you import main and TestCase from unittest
2. You define your own class derived from TestCase.
3. Then you fill it with functions that start with ‘test’.
3. You run the tests by placing main() in your file, usually at the bottom.

assertEqual() is one of many kinds of assertions that unittest provides

Python's self is analogous to Java's this

Python's unittest has the nice property that even an internal assertion failure will not stop it 
from running all of the tests

the quality of the unit tests is essential to the usefulness of doing unit tests

The Python tool, coverage, measures how many lines of your code a unit test actually test

- coverage:
     Test coverage or code coverage is used to measure the percent of your code covered by a test. 
     Coverage testing only checks whether or not a test is present. It does not check the quality of the test.

     --branch: to activate branch coverage otherwise only statement coverage is measured
     -m flag: shows the line number of missing statements

Coverage output:
     Stmts, or code statements, indicate the number of lines of code that could be tested.
     Miss, or Missed lines, indicates the number of lines that are not executed by the unit tests. 
     Branch: number of possible branches
     BrPart: number of branches that were executed during tests
     Cover, or Coverage, is the percentage of code covered by the current tests 
        (equivalent to [(Stmts+Branch) - (Miss+(Branch-BrPart))]/[Stmts+Branch]).
     Missing: missing lines (and branches)
	 
source: https://coverage.readthedocs.io/en/coverage-5.1/cmd.html
        https://coverage.readthedocs.io/en/coverage-5.1/branch.html